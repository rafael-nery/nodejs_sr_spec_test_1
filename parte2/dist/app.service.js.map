{"version":3,"file":"app.service.js","sourceRoot":"/","sources":["app.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,2CAAmD;AACnD,yCAAwC;AAGjC,IAAM,UAAU,kBAAhB,MAAM,UAAU;IAAhB;QACY,WAAM,GAAW,IAAI,eAAM,CAAC,YAAU,CAAC,IAAI,CAAC,CAAA;IAwB/D,CAAC;IAlBC,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAA;QAC3C,OAAO,wCAAwC,CAAA;IACjD,CAAC;IAKD,YAAY;QACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA;QAChD,IAAI,CAAC;YACH,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAA;QAC1D,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAA;YAChE,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;YAC9B,MAAM,KAAK,CAAA;QACb,CAAC;IACH,CAAC;CACF,CAAA;AAzBY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;GACA,UAAU,CAyBtB","sourcesContent":["// src/app.service.ts\nimport { Injectable, Logger } from '@nestjs/common'\nimport * as Sentry from '@sentry/nestjs'\n\n@Injectable()\nexport class AppService {\n  private readonly logger: Logger = new Logger(AppService.name)\n\n  /**\n   * Retorna uma mensagem de saudação.\n   * @returns {string} Mensagem de saudação.\n   */\n  getHello(): string {\n    this.logger.log('Chamando método getHello')\n    return 'NODEJS SR SPEC TEST - PARTE 2: Prática'\n  }\n\n  /**\n   * Método de exemplo que gera um erro intencional para teste do Sentry.\n   */\n  triggerError(): void {\n    this.logger.warn('Chamando método triggerError')\n    try {\n      throw new Error('Erro intencional para teste do Sentry')\n    } catch (error) {\n      this.logger.error('Erro capturado em triggerError', error.stack)\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n}\n"]}