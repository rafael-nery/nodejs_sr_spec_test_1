{"version":3,"file":"all-exceptions.filter.js","sourceRoot":"/","sources":["common/filters/all-exceptions.filter.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAiG;AAEjG,2CAA2C;AASpC,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAE9B,KAAK,CAAC,SAAkB,EAAE,IAAmB;QAE3C,MAAM,GAAG,GAAsB,IAAI,CAAC,YAAY,EAAE,CAAA;QAGlD,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAA;QAGlC,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,EAAE,CAAA;QAGhC,MAAM,MAAM,GAAW,SAAS,YAAY,sBAAa,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,mBAAU,CAAC,qBAAqB,CAAA;QAGpH,MAAM,OAAO,GAAoB,SAAS,YAAY,sBAAa,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,0BAA0B,CAAA;QAG1H,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;YAC3B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE,OAAO,CAAC,GAAG;YACjB,KAAK,EAAE,OAAO;SACf,CAAC,CAAA;IACJ,CAAC;CACF,CAAA;AAzBY,kDAAmB;AAE9B;IADC,IAAA,mBAAU,GAAE;;;;gDAuBZ;8BAxBU,mBAAmB;IAD/B,IAAA,cAAK,GAAE;GACK,mBAAmB,CAyB/B","sourcesContent":["import { ArgumentsHost, Catch, ExceptionFilter, HttpException, HttpStatus } from '@nestjs/common'\nimport { HttpArgumentsHost } from '@nestjs/common/interfaces'\nimport { WithSentry } from '@sentry/nestjs'\n\n/**\n * Filtro global para capturar e tratar todas as exceções não tratadas na aplicação.\n *\n * Esta classe implementa a interface `ExceptionFilter` do NestJS e utiliza o decorador `@Catch()`\n * para interceptar todas as exceções lançadas durante o processamento das requisições.\n */\n@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n  @WithSentry()\n  catch(exception: unknown, host: ArgumentsHost) {\n    // Obtém o contexto HTTP a partir do ArgumentsHost\n    const ctx: HttpArgumentsHost = host.switchToHttp()\n\n    // Obtém o objeto de resposta (response) a partir do contexto HTTP\n    const response = ctx.getResponse()\n\n    // Obtém o objeto de requisição (request) a partir do contexto HTTP\n    const request = ctx.getRequest()\n\n    // Determina o status HTTP da resposta com base na exceção\n    const status: number = exception instanceof HttpException ? exception.getStatus() : HttpStatus.INTERNAL_SERVER_ERROR\n\n    // Determina a mensagem de erro com base na exceção\n    const message: string | object = exception instanceof HttpException ? exception.getResponse() : 'Erro interno do servidor'\n\n    // Estrutura a resposta de erro que será enviada ao cliente\n    response.status(status).json({\n      timestamp: new Date().toISOString(), // Timestamp do erro\n      path: request.url, // Rota onde ocorreu o erro\n      error: message // Mensagem de erro\n    })\n  }\n}\n"]}