{"version":3,"file":"logger.service.js","sourceRoot":"/","sources":["common/logger/logger.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAA0D;AAC1D,+CAAsE;AACtE,mCAAkC;AAG3B,IAAM,SAAS,GAAf,MAAM,SAAS;IAGpB;QACE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;YACjC,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;YACjF,UAAU,EAAE;gBACV,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC;oBAC7B,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,wBAA0B,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;iBACxG,CAAC;gBACF,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;oBAC1B,QAAQ,EAAE,gBAAgB;oBAC1B,KAAK,EAAE,OAAO;iBACf,CAAC;gBACF,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,CAAC;aAC/D;SACF,CAAC,CAAA;IACJ,CAAC;IAED,GAAG,CAAC,OAAe;QACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED,KAAK,CAAC,OAAe,EAAE,KAAc;QACnC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,CAAA;IACvC,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED,KAAK,CAAE,OAAe;QACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;IAED,OAAO,CAAE,OAAe;QACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;IAC9B,CAAC;CACF,CAAA;AAvCY,8BAAS;oBAAT,SAAS;IADrB,IAAA,mBAAU,GAAE;;GACA,SAAS,CAuCrB","sourcesContent":["import { Injectable, LoggerService } from '@nestjs/common'\nimport { utilities as nestWinstonModuleUtilities } from 'nest-winston'\nimport * as winston from 'winston'\n\n@Injectable()\nexport class AppLogger implements LoggerService {\n  private logger: winston.Logger\n\n  constructor() {\n    this.logger = winston.createLogger({\n      level: 'info',\n      format: winston.format.combine(winston.format.timestamp(), winston.format.json()),\n      transports: [\n        new winston.transports.Console({\n          format: winston.format.combine(winston.format.colorize(), nestWinstonModuleUtilities.format.nestLike())\n        }),\n        new winston.transports.File({\n          filename: 'logs/error.log',\n          level: 'error'\n        }),\n        new winston.transports.File({ filename: 'logs/combined.log' })\n      ]\n    })\n  }\n\n  log(message: string) {\n    this.logger.info(message)\n  }\n\n  error(message: string, trace?: string) {\n    this.logger.error(message, { trace })\n  }\n\n  warn(message: string) {\n    this.logger.warn(message)\n  }\n\n  debug?(message: string) {\n    this.logger.debug(message)\n  }\n\n  verbose?(message: string) {\n    this.logger.verbose(message)\n  }\n}\n"]}