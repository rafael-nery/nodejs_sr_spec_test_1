{"version":3,"file":"logger.middleware.js","sourceRoot":"/","sources":["common/middleware/logger.middleware.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA4D;AAE5D,iCAAiC;AAS1B,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAAtB;QAWG,WAAM,GAAG,MAAM,CAAC,UAAU,MAAM,EAAE,GAAG,EAAE,GAAG;YAChD,OAAO;gBACL,IAAI,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,GAAG;gBAC/B,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;gBACvB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC;gBACpB,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC;gBACvB,GAAG;gBACH,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;gBACjC,IAAI;aACL,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACd,CAAC,CAAC,CAAC;IAeL,CAAC;IAHC,GAAG,CAAC,GAAY,EAAE,GAAa,EAAE,IAAgB;QAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;CACF,CAAA;AApCY,4CAAgB;2BAAhB,gBAAgB;IAD5B,IAAA,mBAAU,GAAE;GACA,gBAAgB,CAoC5B","sourcesContent":["import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as morgan from 'morgan';\n\n/**\n * Middleware personalizado para logging de requisições HTTP usando o Morgan.\n *\n * Este middleware registra detalhes de cada requisição HTTP recebida pela aplicação,\n * como método, URL, status da resposta e tempo de resposta.\n */\n@Injectable()\nexport class LoggerMiddleware implements NestMiddleware {\n  /**\n   * Instância do Morgan configurada para formatar as mensagens de log.\n   *\n   * A formatação personalizada inclui:\n   * - Timestamp da requisição.\n   * - Método HTTP (GET, POST, etc.).\n   * - URL da requisição.\n   * - Status da resposta.\n   * - Tempo de resposta em milissegundos.\n   */\n  private logger = morgan(function (tokens, req, res) {\n    return [\n      `[${new Date().toISOString()}]`, // Timestamp da requisição\n      tokens.method(req, res),         // Método HTTP\n      tokens.url(req, res),            // URL da requisição\n      tokens.status(req, res),         // Status da resposta\n      '-',\n      tokens['response-time'](req, res), // Tempo de resposta\n      'ms',\n    ].join(' ');\n  });\n\n  /**\n   * Método chamado para processar a requisição.\n   *\n   * Este método integra o middleware Morgan configurado para registrar\n   * os detalhes da requisição e, em seguida, chama a próxima função middleware na cadeia.\n   *\n   * @param req - Objeto de requisição HTTP.\n   * @param res - Objeto de resposta HTTP.\n   * @param next - Função para chamar o próximo middleware.\n   */\n  use(req: Request, res: Response, next: () => void) {\n    this.logger(req, res, next);\n  }\n}\n"]}