{"version":3,"file":"user.controller.js","sourceRoot":"/","sources":["user/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Body, Controller, Delete, Get, Param, Patch, Post, UseGuards } from '@nestjs/common'\nimport { UserService } from '@/user/user.service'\nimport { CreateUserDto } from '@/user/dto/create-user.dto'\nimport { JwtAuthGuard } from '@/auth/jwt-auth.guard'\nimport { User } from '@/user/schemas/user.schema'\nimport { UpdateUserDto } from '@/user/dto/update-user.dto'\nimport { ApiBearerAuth, ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger'\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @ApiOperation({ summary: 'Registrar um novo usuário' })\n  @ApiResponse({ status: 201, description: 'Usuário criado com sucesso.' })\n  @Post('register')\n  create(@Body() createUserDto: CreateUserDto): Promise<User> {\n    return this.userService.create(createUserDto)\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Listar todos os usuários' })\n  @ApiResponse({\n    status: 200,\n    description: 'Lista de usuários retornada com sucesso.'\n  })\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  findAll(): Promise<User[]> {\n    return this.userService.findAll()\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Obter detalhes de um usuário pelo username' })\n  @ApiResponse({ status: 200, description: 'Detalhes do usuário retornados com sucesso.' })\n  @UseGuards(JwtAuthGuard)\n  @Get(':username')\n  findOne(@Param('username') username: string): Promise<User> {\n    return this.userService.findOne(username)\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Atualizar um usuário pelo ID' })\n  @ApiResponse({ status: 200, description: 'Usuário atualizado com sucesso.' })\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto): Promise<User> {\n    return this.userService.update(id, updateUserDto)\n  }\n\n  @ApiBearerAuth()\n  @ApiOperation({ summary: 'Remover um usuário pelo ID' })\n  @ApiResponse({ status: 200, description: 'Usuário removido com sucesso.' })\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  remove(@Param('id') id: string): Promise<void> {\n    return this.userService.remove(id)\n  }\n}\n"]}