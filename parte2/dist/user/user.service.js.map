{"version":3,"file":"user.service.js","sourceRoot":"/","sources":["user/user.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectModel } from '@nestjs/mongoose'\nimport { Model } from 'mongoose'\nimport * as bcrypt from 'bcrypt'\nimport * as Sentry from '@sentry/node'\nimport { AppLogger } from '@/common/logger/logger.service'\nimport { User, UserDocument } from '@/user/schemas/user.schema'\nimport { CreateUserDto } from '@/user/dto/create-user.dto'\nimport { UpdateUserDto } from '@/user/dto/update-user.dto'\n\n@Injectable()\nexport class UserService {\n  private readonly logger = new AppLogger()\n\n  constructor(@InjectModel(User.name) private userModel: Model<UserDocument>) {}\n\n  async create(createUserDto: CreateUserDto): Promise<User> {\n    try {\n      this.logger.log('Criando um novo usuário')\n      const hashedPassword = await bcrypt.hash(createUserDto.password, 10)\n      const createdUser = new this.userModel({\n        ...createUserDto,\n        password: hashedPassword\n      })\n      return createdUser.save()\n    } catch (error) {\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n\n  async findAll(): Promise<User[]> {\n    try {\n      this.logger.log('Listando todos os usuários')\n      return this.userModel.find().exec()\n    } catch (error) {\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n\n  async findOne(username: string): Promise<UserDocument> {\n    try {\n      this.logger.log(`Buscando usuário com username: ${username}`)\n      return this.userModel.findOne({ username }).exec()\n    } catch (error) {\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n\n  async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {\n    try {\n      this.logger.log(`Atualizando usuário com ID: ${id}`)\n      const updateData: any = { ...updateUserDto }\n      if (updateUserDto.password) {\n        updateData.password = await bcrypt.hash(updateUserDto.password, 10)\n      }\n      const updatedUser = await this.userModel.findByIdAndUpdate(id, updateData, { new: true }).exec()\n      if (!updatedUser) {\n        this.logger.error(`Usuário com ID ${id} não encontrado`, 'UserService')\n        throw new NotFoundException(`Usuário com ID ${id} não encontrado`)\n      }\n      return updatedUser\n    } catch (error) {\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n\n  async remove(id: string): Promise<void> {\n    try {\n      this.logger.log(`Removendo usuário com ID: ${id}`)\n      const result = await this.userModel.findByIdAndDelete(id).exec()\n      if (!result) {\n        this.logger.error(`Usuário com ID ${id} não encontrado`, 'UserService')\n        throw new NotFoundException(`Usuário com ID ${id} não encontrado`)\n      }\n    } catch (error) {\n      Sentry.captureException(error)\n      throw error\n    }\n  }\n}\n"]}