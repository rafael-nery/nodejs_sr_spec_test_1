{"version":3,"file":"auth.service.js","sourceRoot":"/","sources":["auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAkE;AAClE,qCAAwC;AACxC,iCAAgC;AAChC,uDAAiD;AAK1C,IAAM,WAAW,GAAjB,MAAM,WAAW;IACtB,YACmB,WAAwB,EACxB,UAAsB;QADtB,gBAAW,GAAX,WAAW,CAAa;QACxB,eAAU,GAAV,UAAU,CAAY;IACtC,CAAC;IAEJ,KAAK,CAAC,KAAK,CAAC,QAAkB;QAC5B,MAAM,IAAI,GAAiB,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QAC5E,IAAI,IAAI,IAAI,CAAC,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YACrE,MAAM,OAAO,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAA;YAC1D,OAAO;gBACL,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;aAC5C,CAAA;QACH,CAAC;QACD,MAAM,IAAI,8BAAqB,CAAC,uBAAuB,CAAC,CAAA;IAC1D,CAAC;CACF,CAAA;AAhBY,kCAAW;sBAAX,WAAW;IADvB,IAAA,mBAAU,GAAE;qCAGqB,0BAAW;QACZ,gBAAU;GAH9B,WAAW,CAgBvB","sourcesContent":["import { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtService } from '@nestjs/jwt'\nimport * as bcrypt from 'bcrypt'\nimport { UserService } from '@/user/user.service'\nimport { LoginDto } from '@/auth/dto/login.dto'\nimport { UserDocument } from '@/user/schemas/user.schema'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly userService: UserService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  async login(loginDto: LoginDto) {\n    const user: UserDocument = await this.userService.findOne(loginDto.username)\n    if (user && (await bcrypt.compare(loginDto.password, user.password))) {\n      const payload = { username: user.username, sub: user._id }\n      return {\n        access_token: this.jwtService.sign(payload)\n      }\n    }\n    throw new UnauthorizedException('Credenciais inv√°lidas')\n  }\n}\n"]}